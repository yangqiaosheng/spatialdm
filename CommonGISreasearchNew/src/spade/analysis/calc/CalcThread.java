package spade.analysis.calc;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Vector;

import spade.lib.util.CheckableThread;

/**
* Allows to perform heavy computations in background
*/
public class CalcThread extends Thread implements CheckableThread {
	/**
	* The calculator to be run
	*/
	protected Calculator calc = null;
	/**
	* Indicates whether the calculation is currently in progress
	*/
	protected boolean running = false;
	/**
	* The new attributes generated by the calculator
	*/
	protected Vector resultAttrs = null;
	/**
	* The component to be notified about the computations having been finished
	*/
	protected PropertyChangeListener owner = null;
	/**
	* Stores the identifier of the calculation method
	*/
	public int methodId = -1;
	/**
	* Stores the idescriptors of the attributes used for the calculations
	*/
	public Vector attrDescr = null;
	/**
	* Stores the identifier of the geographical layer on which calculation
	* results may be represented
	*/
	public String layerId = null;

	/**
	* Constructs the thread with passing it the calculator to be run and the
	* component to be notified about the computations having been finished
	*/
	public CalcThread(Calculator calc, PropertyChangeListener owner) {
		this.calc = calc;
		this.owner = owner;
	}

	/**
	* Starts the calculator
	*/
	@Override
	public void run() {
		if (calc != null) {
			running = true;
			resultAttrs = calc.doCalculation();
			running = false;
			if (owner != null) {
				PropertyChangeEvent e = new PropertyChangeEvent(this, "calc_finished", null, null);
				owner.propertyChange(e);
			}
		}
	}

	/**
	* Reports whether the calculation is currently in progress
	*/
	@Override
	public boolean isRunning() {
		return running;
	}

	/**
	* Returns its calculator
	*/
	public Calculator getCalculator() {
		return calc;
	}

	/**
	* Returns the new attributes generated by the calculator
	*/
	public Vector getResultingAttributes() {
		return resultAttrs;
	}
}