package spade.lib.color.ColorBrewer;

import java.awt.Color;
import java.util.Vector;

/**
 * Created by IntelliJ IDEA.
 * User: gennady
 * Date: Oct 29, 2009
 * Time: 11:45:54 AM
 * To change this template use File | Settings | File Templates.
 */
public class Schemes {

	public static final Color getColor(float position, int[][] scheme, int classes) {

		if (classes == 0) {
			int gap = (int) (position * (scheme.length - 1));
			if (gap == scheme.length - 1)
				return new Color(scheme[scheme.length - 1][0], scheme[scheme.length - 1][1], scheme[scheme.length - 1][2]);
			float k = (position * (scheme.length - 1) - gap);

			int r1 = scheme[gap][0];
			int r2 = scheme[gap + 1][0];
			int g1 = scheme[gap][1];
			int g2 = scheme[gap + 1][1];
			int b1 = scheme[gap][2];
			int b2 = scheme[gap + 1][2];

			float rs = r2 - r1;
			float gs = g2 - g1;
			float bs = b2 - b1;

			float rv = rs * k + r1;
			float gv = gs * k + g1;
			float bv = bs * k + b1;

			return new Color((int) rv, (int) gv, (int) bv);
		} else {
			int gap = (int) (position * classes);
			if (gap == classes) {
				gap--;
			}
			position = (float) gap / classes + 1 / (float) classes / 2;
			return getColor(position, scheme, 0);
		}

	}

	public static String schemeNames[] = { "RYG", "PYB", "BrBG", "PRGn", "PiYG", "RdGy", "RdBu", "PuOr", "spectral", "BYR-UnKn", "UnKn", "WVWL08_GWR" };

	public static Color getColor(float position, int schemeIdx, boolean inverted) {
		int scheme[][];
		switch (schemeIdx) {
		case 1:
			scheme = PYB;
			break;
		case 2:
			scheme = BrBG;
			break;
		case 3:
			scheme = PRGn;
			break;
		case 4:
			scheme = PiYG;
			break;
		case 5:
			scheme = RdGy;
			break;
		case 6:
			scheme = RdBu;
			break;
		case 7:
			scheme = PuOr;
			break;
		case 8:
			scheme = spectral;
			break;
		case 9:
			scheme = UnKn_BYR;
			break;
		case 10:
			scheme = UnKn2;
			break;
		case 11:
			scheme = WVWL08_GWR;
			break;
		default:
			scheme = RYG;
			break;
		}
		return getColor((inverted) ? 1 - position : position, scheme, 0);
	}

	public static final int[][] Reds = new int[][] { { 255, 245, 240 }, { 254, 229, 217 }, { 254, 224, 210 }, { 252, 187, 161 }, { 252, 174, 145 }, { 252, 146, 114 }, { 251, 106, 74 }, { 239, 59, 44 }, { 222, 45, 38 }, { 203, 24, 29 },
			{ 165, 15, 21 }, { 153, 0, 13 }, { 103, 0, 13 } };

	public static final int[][] Greys = new int[][] { { 255, 255, 255 }, { 247, 247, 247 }, { 240, 240, 240 }, { 217, 217, 217 }, { 204, 204, 204 }, { 189, 189, 189 }, { 150, 150, 150 }, { 115, 115, 115 }, { 99, 99, 99 }, { 82, 82, 82 },
			{ 37, 37, 37 }, { 37, 37, 37 }, { 0, 0, 0 } };

	public static final int[][] Purples = new int[][] { { 252, 251, 253 }, { 242, 240, 247 }, { 239, 237, 245 }, { 218, 218, 235 }, { 203, 201, 226 }, { 188, 189, 220 }, { 158, 154, 200 }, { 128, 125, 186 }, { 117, 107, 177 }, { 106, 81, 163 },
			{ 84, 39, 143 }, { 74, 20, 134 }, { 63, 0, 125 } };

	public static final int[][] Blues = new int[][] { { 247, 251, 255 }, { 239, 243, 255 }, { 222, 235, 247 }, { 198, 219, 239 }, { 189, 215, 231 }, { 158, 202, 225 }, { 107, 174, 214 }, { 66, 146, 198 }, { 49, 130, 189 }, { 33, 113, 181 },
			{ 8, 81, 156 }, { 8, 69, 148 }, { 8, 48, 107 } };

	public static final int[][] Greens = new int[][] { { 247, 252, 245 }, { 237, 248, 233 }, { 229, 245, 224 }, { 199, 233, 192 }, { 186, 228, 179 }, { 161, 217, 155 }, { 116, 196, 118 }, { 65, 171, 93 }, { 49, 163, 84 }, { 35, 139, 69 },
			{ 0, 109, 44 }, { 0, 90, 50 }, { 0, 68, 27 } };

	public static final int[][] Oranges = new int[][] { { 255, 245, 235 }, { 254, 237, 222 }, { 254, 230, 206 }, { 253, 208, 162 }, { 253, 190, 133 }, { 253, 174, 107 }, { 253, 141, 60 }, { 241, 105, 19 }, { 230, 85, 13 }, { 217, 72, 1 },
			{ 166, 54, 3 }, { 140, 45, 4 }, { 127, 39, 4 } };

	public static final int[][] Set2 = new int[][] { { 102, 194, 165 }, { 252, 141, 98 }, { 141, 160, 203 }, { 231, 138, 195 }, { 166, 216, 84 }, { 255, 217, 47 }, { 229, 196, 148 }, { 179, 179, 179 } };

	public static final int[][] Set3 = new int[][] { { 141, 211, 199 }, { 255, 255, 179 }, { 190, 186, 218 }, { 251, 128, 114 }, { 128, 177, 211 }, { 253, 180, 98 }, { 179, 222, 105 }, { 252, 205, 229 }, { 217, 217, 217 }, { 188, 128, 189 },
			{ 204, 235, 197 }, { 255, 237, 111 } };

	public static final int[][] Pastel = new int[][] { { 179, 226, 205 }, { 253, 205, 172 }, { 203, 213, 232 }, { 244, 202, 228 }, { 230, 245, 201 }, { 255, 242, 174 }, { 241, 226, 204 }, { 204, 204, 204 } };

	public static final int[][] Dark2 = new int[][] { { 27, 158, 119 }, { 217, 95, 2 }, { 117, 112, 179 }, { 231, 41, 138 }, { 102, 166, 30 }, { 230, 171, 2 }, { 166, 118, 29 }, { 102, 102, 102 } };

	public static final int[][] Paired = new int[][] { { 166, 206, 227 }, { 31, 120, 180 }, { 178, 223, 138 }, { 51, 160, 44 }, { 251, 154, 153 }, { 227, 26, 28 }, { 253, 191, 111 }, { 255, 127, 0 }, { 202, 178, 214 }, { 106, 61, 154 },
			{ 255, 255, 153 }, { 177, 89, 40 } };

	public static final int[][] Pastel1 = new int[][] { { 251, 180, 174 }, { 179, 205, 227 }, { 204, 235, 197 }, { 222, 203, 228 }, { 254, 217, 166 }, { 255, 255, 204 }, { 229, 216, 189 }, { 253, 218, 236 }, { 242, 242, 242 } };

	public static final int[][] Accents = new int[][] { { 127, 201, 127 }, { 190, 174, 212 }, { 253, 192, 134 }, { 255, 255, 153 }, { 56, 108, 176 }, { 240, 2, 127 }, { 191, 91, 23 }, { 102, 102, 102 } };

	public static final int[][] Set1 = new int[][] { { 228, 26, 28 }, { 55, 126, 184 }, { 77, 175, 74 }, { 152, 78, 163 }, { 255, 127, 0 }, { 255, 255, 51 }, { 166, 86, 40 }, { 247, 129, 191 }, { 153, 153, 153 } };

	public static final int[][] PuRd = new int[][] { { 247, 244, 249 }, { 241, 238, 246 }, { 231, 225, 239 }, { 212, 185, 218 }, { 215, 181, 216 }, { 201, 148, 199 }, { 223, 101, 176 }, { 231, 41, 138 }, { 221, 28, 119 }, { 206, 18, 86 },
			{ 152, 0, 67 }, { 145, 0, 63 }, { 103, 0, 31 } };

	public static final int[][] RdPu = new int[][] { { 255, 247, 243 }, { 254, 235, 226 }, { 253, 224, 221 }, { 252, 197, 192 }, { 251, 180, 185 }, { 250, 159, 181 }, { 247, 104, 161 }, { 221, 52, 151 }, { 197, 27, 138 }, { 174, 1, 126 },
			{ 122, 1, 119 }, { 122, 1, 119 }, { 73, 0, 106 } };

	public static final int[][] BuPu = new int[][] { { 247, 252, 253 }, { 237, 248, 251 }, { 224, 236, 244 }, { 191, 211, 230 }, { 179, 205, 227 }, { 158, 188, 218 }, { 140, 150, 198 }, { 140, 107, 177 }, { 136, 86, 167 }, { 136, 65, 157 },
			{ 129, 15, 124 }, { 110, 1, 107 }, { 77, 0, 75 } };

	public static final int[][] YlOrRd = new int[][] { { 255, 255, 204 }, { 255, 255, 178 }, { 255, 237, 160 }, { 254, 217, 118 }, { 254, 204, 92 }, { 254, 178, 76 }, { 253, 141, 60 }, { 252, 78, 42 }, { 240, 59, 32 }, { 227, 26, 28 },
			{ 189, 0, 38 }, { 177, 0, 38 }, { 128, 0, 38 } };

	public static final int[][] YlOrBr = new int[][] { { 255, 255, 229 }, { 255, 255, 212 }, { 255, 247, 188 }, { 254, 227, 145 }, { 254, 217, 142 }, { 254, 196, 79 }, { 254, 153, 41 }, { 236, 112, 20 }, { 217, 95, 14 }, { 204, 76, 2 },
			{ 153, 52, 4 }, { 140, 45, 4 }, { 102, 37, 6 } };

	public static final int[][] PuBuGn = new int[][] { { 255, 247, 251 }, { 246, 239, 247 }, { 236, 226, 240 }, { 208, 209, 230 }, { 189, 201, 225 }, { 166, 189, 219 }, { 116, 169, 207 }, { 54, 144, 192 }, { 28, 144, 153 }, { 2, 129, 138 },
			{ 1, 108, 89 }, { 1, 100, 80 }, { 1, 70, 54 } };

	public static final int[][] PuBu = new int[][] { { 255, 247, 251 }, { 241, 238, 246 }, { 236, 231, 242 }, { 208, 209, 230 }, { 189, 201, 225 }, { 166, 189, 219 }, { 103, 169, 207 }, { 54, 144, 192 }, { 43, 140, 190 }, { 5, 112, 176 },
			{ 4, 90, 141 }, { 3, 78, 123 }, { 2, 56, 88 } };

	public static final int[][] OrRd = new int[][] { { 255, 247, 236 }, { 254, 240, 217 }, { 254, 232, 200 }, { 253, 212, 158 }, { 253, 204, 138 }, { 253, 187, 132 }, { 252, 141, 89 }, { 239, 101, 72 }, { 227, 74, 51 }, { 215, 48, 31 },
			{ 179, 0, 0 }, { 153, 0, 0 }, { 127, 0, 0 } };

	public static final int[][] BuGn = new int[][] { { 247, 252, 253 }, { 237, 248, 251 }, { 229, 245, 249 }, { 204, 236, 230 }, { 178, 226, 226 }, { 153, 216, 201 }, { 102, 194, 164 }, { 65, 174, 118 }, { 44, 162, 95 }, { 35, 139, 69 },
			{ 0, 109, 44 }, { 0, 88, 36 }, { 0, 68, 27 } };

	public static final int[][] YlGn = new int[][] { { 255, 255, 229 }, { 255, 255, 204 }, { 247, 252, 185 }, { 217, 240, 163 }, { 194, 230, 153 }, { 173, 221, 142 }, { 120, 198, 121 }, { 65, 171, 93 }, { 49, 163, 84 }, { 35, 132, 67 },
			{ 0, 104, 55 }, { 0, 90, 50 }, { 0, 69, 41 } };

	public static final int[][] GnBu = new int[][] { { 247, 252, 240 }, { 240, 249, 232 }, { 224, 243, 219 }, { 204, 235, 197 }, { 186, 228, 188 }, { 168, 221, 181 }, { 123, 204, 196 }, { 78, 179, 211 }, { 67, 162, 202 }, { 43, 140, 190 },
			{ 8, 104, 172 }, { 8, 88, 158 }, { 8, 64, 129 } };

	public static final int[][] YlGnBu = new int[][] { { 255, 255, 217 }, { 255, 255, 204 }, { 237, 248, 177 }, { 199, 233, 180 }, { 161, 218, 180 }, { 127, 205, 187 }, { 65, 182, 196 }, { 29, 145, 192 }, { 44, 127, 184 }, { 34, 94, 168 },
			{ 37, 52, 148 }, { 12, 44, 132 }, { 8, 29, 88 } };

	public static final int[][] PiYG = new int[][] { { 142, 1, 82 }, { 197, 27, 125 }, { 208, 28, 139 }, { 222, 119, 174 }, { 233, 163, 201 }, { 241, 182, 218 }, { 253, 224, 239 }, { 247, 247, 247 }, { 230, 245, 208 }, { 184, 225, 134 },
			{ 161, 215, 106 }, { 127, 188, 65 }, { 77, 172, 38 }, { 77, 146, 33 }, { 39, 100, 25 } };

	public static final int[][] PuOr = new int[][] { { 127, 59, 8 }, { 179, 88, 6 }, { 230, 97, 1 }, { 224, 130, 20 }, { 241, 163, 64 }, { 253, 184, 99 }, { 254, 224, 182 }, { 247, 247, 247 }, { 216, 218, 235 }, { 178, 171, 210 }, { 153, 142, 195 },
			{ 128, 115, 172 }, { 94, 60, 153 }, { 84, 39, 136 }, { 45, 0, 75 } };

	public static final int[][] PYB = new int[][] { { 165, 0, 38 }, { 215, 48, 39 }, { 215, 25, 28 }, { 244, 109, 67 }, { 252, 141, 89 }, { 253, 174, 97 }, { 254, 224, 144 }, { 255, 255, 191 }, { 224, 243, 248 }, { 171, 217, 233 },
			{ 145, 191, 219 }, { 116, 173, 209 }, { 44, 123, 182 }, { 69, 117, 180 }, { 49, 54, 149 } };

	public static final int[][] spectral = new int[][] { { 158, 1, 66 }, { 213, 62, 79 }, { 215, 25, 28 }, { 244, 109, 67 }, { 252, 141, 89 }, { 253, 174, 97 }, { 254, 224, 139 }, { 255, 255, 191 }, { 230, 245, 152 }, { 171, 221, 164 },
			{ 153, 213, 148 }, { 102, 194, 165 }, { 43, 131, 186 }, { 50, 136, 189 }, { 94, 79, 162 } };

	public static final int[][] RdGy = new int[][] { { 103, 0, 31 }, { 178, 24, 43 }, { 202, 0, 32 }, { 214, 96, 77 }, { 239, 138, 98 }, { 244, 165, 130 }, { 253, 219, 199 }, { 255, 255, 255 }, { 224, 224, 224 }, { 186, 186, 186 },
			{ 153, 153, 153 }, { 135, 135, 135 }, { 64, 64, 64 }, { 77, 77, 77 }, { 26, 26, 26 } };

	public static final int[][] RYG = new int[][] { { 165, 0, 38 }, { 215, 48, 39 }, { 215, 25, 28 }, { 244, 109, 67 }, { 252, 141, 89 }, { 253, 174, 97 }, { 254, 224, 139 }, { 255, 255, 191 }, { 217, 239, 139 }, { 166, 217, 106 }, { 145, 207, 96 },
			{ 102, 189, 99 }, { 26, 150, 65 }, { 26, 152, 80 }, { 0, 104, 55 } };

	public static final int[][] RdBu = new int[][] { { 103, 0, 31 }, { 178, 24, 43 }, { 202, 0, 32 }, { 214, 96, 77 }, { 239, 138, 98 }, { 244, 165, 130 }, { 253, 219, 199 }, { 247, 247, 247 }, { 209, 229, 240 }, { 146, 197, 222 },
			{ 103, 169, 207 }, { 67, 147, 195 }, { 5, 113, 176 }, { 33, 102, 172 }, { 5, 48, 97 } };

	public static final int[][] PRGn = new int[][] { { 64, 0, 75 }, { 118, 42, 131 }, { 123, 50, 148 }, { 153, 112, 171 }, { 175, 141, 195 }, { 194, 165, 207 }, { 231, 212, 232 }, { 247, 247, 247 }, { 217, 240, 211 }, { 166, 219, 160 },
			{ 127, 191, 123 }, { 90, 174, 97 }, { 0, 136, 55 }, { 27, 120, 55 }, { 0, 68, 27 } };

	public static final int[][] BrBG = new int[][] { { 84, 48, 5 }, { 140, 81, 10 }, { 166, 97, 26 }, { 191, 129, 45 }, { 216, 179, 101 }, { 223, 194, 125 }, { 246, 232, 195 }, { 245, 245, 245 }, { 199, 234, 229 }, { 128, 205, 193 },
			{ 90, 180, 172 }, { 53, 151, 143 }, { 1, 133, 113 }, { 1, 102, 94 }, { 0, 60, 48 } };

	public static final int[][] UnKn2 = new int[][] { { 162, 175, 62 }, { 160, 175, 61 }, { 158, 176, 61 }, { 156, 177, 61 }, { 154, 178, 61 }, { 152, 179, 61 }, { 151, 180, 62 }, { 149, 180, 62 }, { 147, 181, 62 }, { 145, 182, 62 },
			{ 143, 182, 62 }, { 141, 183, 62 }, { 139, 184, 63 }, { 137, 184, 63 }, { 136, 185, 63 }, { 134, 185, 64 }, { 132, 186, 64 }, { 130, 186, 65 }, { 128, 187, 65 }, { 126, 187, 65 }, { 124, 187, 66 }, { 122, 188, 67 }, { 120, 188, 67 },
			{ 118, 188, 68 }, { 117, 189, 68 }, { 115, 189, 69 }, { 113, 189, 70 }, { 111, 189, 70 }, { 109, 189, 71 }, { 107, 189, 72 }, { 106, 189, 73 }, { 104, 189, 73 }, { 102, 189, 74 }, { 100, 189, 75 }, { 98, 189, 76 }, { 97, 189, 77 },
			{ 95, 189, 78 }, { 93, 189, 79 }, { 92, 188, 80 }, { 90, 188, 81 }, { 88, 188, 82 }, { 87, 188, 83 }, { 85, 187, 84 }, { 83, 187, 85 }, { 82, 186, 86 }, { 80, 186, 87 }, { 79, 185, 88 }, { 77, 185, 89 }, { 76, 184, 90 }, { 74, 184, 91 },
			{ 73, 183, 92 }, { 71, 182, 93 }, { 70, 182, 94 }, { 69, 181, 96 }, { 67, 180, 97 }, { 66, 179, 98 }, { 65, 179, 99 }, { 63, 178, 100 }, { 62, 177, 101 }, { 61, 176, 103 }, { 60, 175, 104 }, { 58, 174, 105 }, { 57, 173, 106 },
			{ 56, 172, 107 }, { 55, 171, 108 }, { 54, 170, 110 }, { 53, 169, 111 }, { 52, 168, 112 }, { 51, 166, 113 }, { 50, 165, 114 }, { 49, 164, 115 }, { 49, 163, 116 }, { 48, 162, 118 }, { 47, 160, 119 }, { 46, 159, 120 }, { 45, 158, 121 },
			{ 45, 156, 122 }, { 44, 155, 123 }, { 43, 153, 124 }, { 43, 152, 125 }, { 42, 151, 126 }, { 42, 149, 127 }, { 41, 148, 128 }, { 41, 146, 129 }, { 40, 145, 130 }, { 40, 143, 131 }, { 40, 142, 132 }, { 39, 140, 133 }, { 39, 138, 134 },
			{ 39, 137, 135 }, { 39, 135, 136 }, { 38, 134, 137 }, { 38, 132, 138 }, { 38, 130, 139 }, { 38, 129, 139 }, { 38, 127, 140 }, { 38, 125, 141 }, { 38, 124, 142 }, { 38, 122, 142 }, { 38, 120, 143 }, { 38, 119, 144 }, { 38, 117, 144 },
			{ 38, 115, 145 }, { 38, 114, 146 }, { 39, 112, 146 }, { 39, 110, 147 }, { 39, 109, 147 }, { 39, 107, 148 }, { 40, 105, 148 }, { 40, 103, 149 }, { 40, 102, 149 }, { 41, 100, 149 }, { 41, 98, 150 }, { 42, 97, 150 }, { 42, 95, 150 },
			{ 43, 93, 151 }, { 43, 92, 151 }, { 44, 90, 151 }, { 44, 88, 151 }, { 45, 87, 152 }, { 46, 85, 152 }, { 46, 83, 152 }, { 47, 82, 152 }, { 48, 80, 152 }, { 48, 78, 152 }, { 49, 77, 152 }, { 50, 75, 152 }, { 50, 74, 152 }, { 51, 72, 152 },
			{ 52, 71, 151 }, { 53, 69, 151 }, { 54, 68, 151 }, { 55, 66, 151 }, { 55, 65, 151 }, { 56, 63, 150 }, { 57, 62, 150 }, { 58, 60, 150 }, { 59, 59, 149 }, { 60, 57, 149 }, { 61, 56, 148 }, { 62, 55, 148 }, { 63, 53, 147 }, { 64, 52, 147 },
			{ 65, 51, 146 }, { 66, 49, 146 }, { 67, 48, 145 }, { 67, 47, 144 }, { 68, 46, 144 }, { 69, 45, 143 }, { 70, 43, 142 }, { 71, 42, 142 }, { 72, 41, 141 }, { 73, 40, 140 }, { 74, 39, 139 }, { 75, 38, 138 }, { 77, 37, 137 }, { 78, 36, 136 },
			{ 79, 35, 136 }, { 80, 34, 135 }, { 81, 33, 134 }, { 82, 33, 133 }, { 82, 32, 132 }, { 83, 31, 131 }, { 84, 30, 129 }, { 85, 29, 128 }, { 86, 29, 127 }, { 87, 28, 126 }, { 88, 27, 125 }, { 89, 27, 124 }, { 90, 26, 123 }, { 91, 25, 121 },
			{ 92, 25, 120 }, { 93, 24, 119 }, { 94, 24, 118 }, { 95, 23, 116 }, { 96, 23, 115 }, { 96, 23, 114 }, { 97, 22, 113 }, { 98, 22, 111 }, { 99, 21, 110 }, { 100, 21, 109 }, { 100, 21, 107 }, { 101, 21, 106 }, { 102, 20, 104 },
			{ 103, 20, 103 }, { 103, 20, 102 }, { 104, 20, 100 }, { 105, 20, 99 }, { 105, 20, 97 }, { 106, 20, 96 }, { 107, 20, 95 }, { 107, 20, 93 }, { 108, 20, 92 }, { 108, 20, 90 }, { 109, 20, 89 }, { 109, 20, 87 }, { 110, 20, 86 },
			{ 110, 20, 84 }, { 111, 21, 83 }, { 111, 21, 81 }, { 112, 21, 80 }, { 112, 21, 79 }, { 112, 22, 77 }, { 113, 22, 76 }, { 113, 22, 74 }, { 113, 22, 73 }, { 114, 23, 71 }, { 114, 23, 70 }, { 114, 24, 68 }, { 114, 24, 67 }, { 114, 25, 66 },
			{ 114, 25, 64 }, { 115, 25, 63 }, { 115, 26, 61 }, { 115, 26, 60 }, { 115, 27, 59 }, { 115, 28, 57 }, { 115, 28, 56 }, { 115, 29, 55 }, { 114, 29, 53 }, { 114, 30, 52 }, { 114, 31, 51 }, { 114, 31, 49 }, { 114, 32, 48 }, { 114, 33, 47 },
			{ 113, 33, 45 }, { 113, 34, 44 }, { 113, 35, 43 }, { 113, 35, 42 }, { 112, 36, 41 }, { 112, 37, 39 }, { 112, 37, 38 }, { 111, 38, 37 }, { 111, 39, 36 }, { 110, 40, 35 }, { 110, 40, 34 }, { 109, 41, 33 }, { 109, 42, 32 }, { 108, 43, 31 },
			{ 108, 44, 30 }, { 107, 44, 29 }, { 107, 45, 28 }, { 106, 46, 27 }, { 105, 47, 26 }, { 105, 48, 25 }, { 104, 48, 24 }, { 103, 49, 23 }, { 102, 50, 22 }, { 102, 51, 21 }, { 101, 51, 21 }, { 100, 52, 20 }, { 99, 53, 19 }, { 98, 54, 18 },
			{ 98, 55, 18 }, { 97, 55, 17 }, { 96, 56, 16 } };

	public static final int[][] UnKn_BYR = new int[][] { { 0, 0, 255 }, { 2, 2, 253 }, { 4, 4, 251 }, { 6, 6, 249 }, { 8, 8, 247 }, { 10, 10, 245 }, { 12, 12, 243 }, { 14, 14, 241 }, { 16, 16, 239 }, { 19, 19, 236 }, { 21, 21, 234 },
			{ 23, 23, 232 }, { 25, 25, 230 }, { 27, 27, 228 }, { 29, 29, 226 }, { 31, 31, 224 }, { 33, 33, 222 }, { 35, 35, 220 }, { 37, 37, 218 }, { 39, 39, 216 }, { 41, 41, 214 }, { 43, 43, 212 }, { 45, 45, 210 }, { 47, 47, 208 }, { 49, 49, 206 },
			{ 51, 51, 204 }, { 53, 53, 202 }, { 56, 56, 199 }, { 58, 58, 197 }, { 60, 60, 195 }, { 62, 62, 193 }, { 64, 64, 191 }, { 66, 66, 189 }, { 68, 68, 187 }, { 70, 70, 185 }, { 72, 72, 183 }, { 74, 74, 181 }, { 76, 76, 179 }, { 78, 78, 177 },
			{ 80, 80, 175 }, { 82, 82, 173 }, { 84, 84, 171 }, { 86, 86, 169 }, { 88, 88, 167 }, { 90, 90, 165 }, { 93, 93, 162 }, { 95, 95, 160 }, { 97, 97, 158 }, { 99, 99, 156 }, { 101, 101, 154 }, { 103, 103, 152 }, { 105, 105, 150 },
			{ 107, 107, 148 }, { 109, 109, 146 }, { 111, 111, 144 }, { 113, 113, 142 }, { 115, 115, 140 }, { 117, 117, 138 }, { 119, 119, 136 }, { 121, 121, 134 }, { 123, 123, 132 }, { 125, 125, 130 }, { 128, 128, 128 }, { 130, 130, 125 },
			{ 132, 132, 123 }, { 134, 134, 121 }, { 136, 136, 119 }, { 138, 138, 117 }, { 140, 140, 115 }, { 142, 142, 113 }, { 144, 144, 111 }, { 146, 146, 109 }, { 148, 148, 107 }, { 150, 150, 105 }, { 152, 152, 103 }, { 154, 154, 101 },
			{ 156, 156, 99 }, { 158, 158, 97 }, { 160, 160, 95 }, { 162, 162, 93 }, { 165, 165, 90 }, { 167, 167, 88 }, { 169, 169, 86 }, { 171, 171, 84 }, { 173, 173, 82 }, { 175, 175, 80 }, { 177, 177, 78 }, { 179, 179, 76 }, { 181, 181, 74 },
			{ 183, 183, 72 }, { 185, 185, 70 }, { 187, 187, 68 }, { 189, 189, 66 }, { 191, 191, 64 }, { 193, 193, 62 }, { 195, 195, 60 }, { 197, 197, 58 }, { 199, 199, 56 }, { 202, 202, 53 }, { 204, 204, 51 }, { 206, 206, 49 }, { 208, 208, 47 },
			{ 210, 210, 45 }, { 212, 212, 43 }, { 214, 214, 41 }, { 216, 216, 39 }, { 218, 218, 37 }, { 220, 220, 35 }, { 222, 222, 33 }, { 224, 224, 31 }, { 226, 226, 29 }, { 228, 228, 27 }, { 230, 230, 25 }, { 232, 232, 23 }, { 234, 234, 21 },
			{ 236, 236, 19 }, { 239, 239, 16 }, { 241, 241, 14 }, { 243, 243, 12 }, { 245, 245, 10 }, { 247, 247, 8 }, { 249, 249, 6 }, { 251, 251, 4 }, { 253, 253, 2 }, { 255, 255, 0 }, { 255, 253, 0 }, { 255, 251, 0 }, { 255, 249, 0 },
			{ 255, 247, 0 }, { 255, 245, 0 }, { 255, 243, 0 }, { 255, 241, 0 }, { 255, 239, 0 }, { 255, 236, 0 }, { 255, 234, 0 }, { 255, 232, 0 }, { 255, 230, 0 }, { 255, 228, 0 }, { 255, 226, 0 }, { 255, 224, 0 }, { 255, 222, 0 }, { 255, 220, 0 },
			{ 255, 218, 0 }, { 255, 216, 0 }, { 255, 214, 0 }, { 255, 212, 0 }, { 255, 210, 0 }, { 255, 208, 0 }, { 255, 206, 0 }, { 255, 204, 0 }, { 255, 202, 0 }, { 255, 199, 0 }, { 255, 197, 0 }, { 255, 195, 0 }, { 255, 193, 0 }, { 255, 191, 0 },
			{ 255, 189, 0 }, { 255, 187, 0 }, { 255, 185, 0 }, { 255, 183, 0 }, { 255, 181, 0 }, { 255, 179, 0 }, { 255, 177, 0 }, { 255, 175, 0 }, { 255, 173, 0 }, { 255, 171, 0 }, { 255, 169, 0 }, { 255, 167, 0 }, { 255, 165, 0 }, { 255, 162, 0 },
			{ 255, 160, 0 }, { 255, 158, 0 }, { 255, 156, 0 }, { 255, 154, 0 }, { 255, 152, 0 }, { 255, 150, 0 }, { 255, 148, 0 }, { 255, 146, 0 }, { 255, 144, 0 }, { 255, 142, 0 }, { 255, 140, 0 }, { 255, 138, 0 }, { 255, 136, 0 }, { 255, 134, 0 },
			{ 255, 132, 0 }, { 255, 130, 0 }, { 255, 128, 0 }, { 255, 125, 0 }, { 255, 123, 0 }, { 255, 121, 0 }, { 255, 119, 0 }, { 255, 117, 0 }, { 255, 115, 0 }, { 255, 113, 0 }, { 255, 111, 0 }, { 255, 109, 0 }, { 255, 107, 0 }, { 255, 105, 0 },
			{ 255, 103, 0 }, { 255, 101, 0 }, { 255, 99, 0 }, { 255, 97, 0 }, { 255, 95, 0 }, { 255, 93, 0 }, { 255, 90, 0 }, { 255, 88, 0 }, { 255, 86, 0 }, { 255, 84, 0 }, { 255, 82, 0 }, { 255, 80, 0 }, { 255, 78, 0 }, { 255, 76, 0 },
			{ 255, 74, 0 }, { 255, 72, 0 }, { 255, 70, 0 }, { 255, 68, 0 }, { 255, 66, 0 }, { 255, 64, 0 }, { 255, 62, 0 }, { 255, 60, 0 }, { 255, 58, 0 }, { 255, 56, 0 }, { 255, 53, 0 }, { 255, 51, 0 }, { 255, 49, 0 }, { 255, 47, 0 },
			{ 255, 45, 0 }, { 255, 43, 0 }, { 255, 41, 0 }, { 255, 39, 0 }, { 255, 37, 0 }, { 255, 35, 0 }, { 255, 33, 0 }, { 255, 31, 0 }, { 255, 29, 0 }, { 255, 27, 0 }, { 255, 25, 0 }, { 255, 23, 0 }, { 255, 21, 0 }, { 255, 19, 0 },
			{ 255, 16, 0 }, { 255, 14, 0 }, { 255, 12, 0 }, { 255, 10, 0 }, { 255, 8, 0 }, { 255, 6, 0 }, { 255, 4, 0 }, { 255, 2, 0 }, { 255, 0, 0 } };

	public static final int[][] WVWL08_GWR = new int[][] { { 28, 125, 49 }, { 57, 183, 75 }, { 103, 226, 102 }, { 176, 249, 150 }, { 247, 247, 240 }, { 255, 210, 175 }, { 253, 160, 109 }, { 231, 97, 50 }, { 168, 46, 25 } };

/*
  public static final int[][][] register = new int[][][] {
Reds,
Greys,
Purples,
Blues,
Greens,
Oranges,

Set2,
Set3,
Pastel,
Dark2,
Paired,
Pastel1,
Accents,
Set1,

PuRd,
RdPu,
BuPu,
YlOrRd,
YlOrBr,
PuBuGn,
PuBu,
OrRd,
BuGn,
YlGn,
GnBu,
YlGnBu,
PiYG,
PuOr,
PYB,
spectral,
RdGy,
RYG,
RdBu,
PRGn,
BrBG


register.addElement(Reds);
register.addElement(Greys);
register.addElement(Purples);
register.addElement(Blues);
register.addElement(Greens);
register.addElement(Oranges);

register.addElement(PuRd);
register.addElement(RdPu);
register.addElement(BuPu);
register.addElement(YlOrRd);
register.addElement(YlOrBr);
register.addElement(PuBuGn);
register.addElement(PuBu);
register.addElement(OrRd);
register.addElement(BuGn);
register.addElement(YlGn);
register.addElement(GnBu);
register.addElement(YlGnBu);
register.addElement(PiYG);
register.addElement(PuOr);
register.addElement(PYB);
register.addElement(spectral);
register.addElement(RdGy);
register.addElement(RYG);
register.addElement(RdBu);
register.addElement(PRGn);
register.addElement(BrBG);
  };

  public static final String[] names = new String[] {
"Reds",
"Greys",
"Purples",
"Blues",
"Greens",
"Oranges",

"Set2",
"Set3",
"Pastel",
"Dark2",
"Paired",
"Pastel1",
"Accents",
"Set1",

"PuRd",
"RdPu",
"BuPu",
"YlOrRd",
"YlOrBr",
"PuBuGn",
"PuBu",
"OrRd",
"BuGn",
"YlGn",
"GnBu",
"YlGnBu",
"PiYG",
"PuOr",
"PYB",
"spectral",
"RdGy",
"RYG",
"RdBu",
"PRGn",
"BrBG"
  };
*/

	public static Vector register = new Vector(40, 5);
	public static Vector names = new Vector(40, 5);

//  public Schemes() {

	static {
		register.addElement(Reds);
		register.addElement(Greys);
		register.addElement(Purples);
		register.addElement(Blues);
		register.addElement(Greens);
		register.addElement(Oranges);

		register.addElement(PuRd);
		register.addElement(RdPu);
		register.addElement(BuPu);
		register.addElement(YlOrRd);
		register.addElement(YlOrBr);
		register.addElement(PuBuGn);
		register.addElement(PuBu);
		register.addElement(OrRd);
		register.addElement(BuGn);
		register.addElement(YlGn);
		register.addElement(GnBu);
		register.addElement(YlGnBu);
		register.addElement(PiYG);
		register.addElement(PuOr);
		register.addElement(PYB);
		register.addElement(spectral);
		register.addElement(RdGy);
		register.addElement(RYG);
		register.addElement(RdBu);
		register.addElement(PRGn);
		register.addElement(BrBG);

		names.addElement("Reds");
		names.addElement("Greys");
		names.addElement("Purples");
		names.addElement("Blues");
		names.addElement("Greens");
		names.addElement("Oranges");

		names.addElement("PuRd");
		names.addElement("RdPu");
		names.addElement("BuPu");
		names.addElement("YlOrRd");
		names.addElement("YlOrBr");
		names.addElement("PuBuGn");
		names.addElement("PuBu");
		names.addElement("OrRd");
		names.addElement("BuGn");
		names.addElement("YlGn");
		names.addElement("GnBu");
		names.addElement("YlGnBu");
		names.addElement("PiYG");
		names.addElement("PuOr");
		names.addElement("PYB");
		names.addElement("spectral");
		names.addElement("RdGy");
		names.addElement("RYG");
		names.addElement("RdBu");
		names.addElement("PRGn");
		names.addElement("BrBG");
	}

}
