package de.fraunhofer.iais.spatial.dao.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

public class DB {

	/**
	 * Logger for this class
	 */
	private static final Logger logger = LoggerFactory.getLogger(DB.class);
	private DataSource dataSource;

	public DataSource getDataSource() {
		return dataSource;
	}

	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	/**
	 * get Connection from Connection Pool
	 * @return
	 */
	public Connection getConn() {

		return DataSourceUtils.getConnection(dataSource);
	}

	public PreparedStatement getPstmt(Connection conn, String sql) {

		PreparedStatement pstmt = null;
		try {
			logger.debug("sql:" + sql);
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {
			logger.error("getPstmt(Connection, String)", e); //$NON-NLS-1$
		}

		return pstmt;
	}

	public PreparedStatement getPstmt(Connection conn, String sql, int autoGeneratedkey) {

		PreparedStatement pstmt = null;
		try {
			logger.debug("sql:" + sql);
			pstmt = conn.prepareStatement(sql, autoGeneratedkey);
		} catch (SQLException e) {
			logger.error("getPstmt(Connection, String, int)", e); //$NON-NLS-1$
		}

		return pstmt;
	}

	public ResultSet getRs(PreparedStatement pstmt) {

		ResultSet rs = null;
		try {
			rs = pstmt.executeQuery();
		} catch (SQLException e) {
			logger.error("getRs(PreparedStatement)", e); //$NON-NLS-1$
		}

		return rs;
	}

	public void close(Connection conn) {

		DataSourceUtils.releaseConnection(conn, dataSource);
	}

	public void close(Statement stmt) {

		if (stmt != null) {
			try {
				stmt.close();
			} catch (SQLException e) {
				logger.error("close(Statement)", e); //$NON-NLS-1$
			} finally {
				stmt = null;
			}
		}
	}

	public void close(ResultSet rs) {

		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
				logger.error("close(ResultSet)", e); //$NON-NLS-1$
			} finally {
				rs = null;
			}
		}
	}
}